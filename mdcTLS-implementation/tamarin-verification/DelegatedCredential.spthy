theory DelegatedCredentials

begin

builtins: asymmetric-encryption, hashing, signing

functions: pk/1, aenc/2, adec/2, h/1, sign/2, verify/3

// Rule to generate and register a server's key pair
rule Register_Server:
  [ Fr(~skS) ]
  -->
  [ !ServerLtk($S, ~skS), !ServerPk($S, pk(~skS)) ]

// Rule to generate and register a middlebox's key pair
rule Register_Middlebox:
  [ Fr(~skM) ]
  -->
  [ !MiddleboxLtk($M, ~skM), !MiddleboxPk($M, pk(~skM)) ]

// Server issues a Delegated Credential to the middlebox
rule Issue_Delegated_Credential:
  [ Fr(~dc), !ServerLtk($S, ~skS), !MiddleboxPk($M, pkM) ]
  --[ DcIssued($S, $M, ~dc) ]->
  [ !DelegatedCredential($M, ~dc), Out(sign(~dc, ~skS)), !MiddleboxDc($M, ~dc) ]

// Client starts the handshake by encrypting the session key with the middlebox's public key
rule Client_Start_Handshake:
  let
    encSessionKey = aenc(~sessionKey, pkM)
  in
  [ Fr(~sessionKey), !MiddleboxPk($M, pkM) ]
  --[ ClientSentSessionKey($C, $M, ~sessionKey) ]->
  [ Out(encSessionKey), !ClientSessionKey($C, ~sessionKey) ]

// Middlebox receives the encrypted session key, decrypts it, and uses the delegated credential to authenticate
rule Middlebox_Receive_Handshake:
  let
    decSessionKey = adec(encSessionKey, ~skM)
  in
  [ In(encSessionKey), !MiddleboxLtk($M, ~skM), !MiddleboxDc($M, dc) ]
  --[ MiddleboxReceivedSessionKey($M, decSessionKey) ]->
  [ !MiddleboxSessionKey($M, decSessionKey) ]

// Middlebox sends confirmation back to the client
rule Middlebox_Send_Confirmation:
  let
    hashedSessionKey = h(sessionKey)
  in
  [ !MiddleboxSessionKey($M, sessionKey) ]
  --[ MiddleboxConfirmedSessionKey($M, sessionKey) ]->
  [ Out(hashedSessionKey) ]

// Client receives confirmation from the middlebox
rule Client_Receive_Confirmation:
  [ In(hashedSessionKey), !ClientSessionKey($C, sessionKey) ]
  --[ ClientReceivedConfirmation($C, $M, sessionKey) ]->
  []

// Adversary reveals the delegated credential
rule Reveal_Delegated_Credential:
  [ !DelegatedCredential($M, dc) ]
  --[ DcReveal(dc) ]->
  [ Out(dc) ]

// Adversary reveals the session key
rule Reveal_Session_Key:
  [ !ClientSessionKey($C, sessionKey) ]
  --[ SessionKeyReveal(sessionKey) ]->
  [ Out(sessionKey) ]

// Lemma to ensure the session key remains secret unless explicitly revealed
lemma SessionKeySecrecy:
  "All sessionKey #i #j C M.
      ClientSentSessionKey(C, M, sessionKey) @ i &
      K(sessionKey) @ j
    ==> Ex #r. SessionKeyReveal(sessionKey) @ r"

// Lemma to ensure that the session key is correctly set up
lemma ClientSessionKeySetup:
  exists-trace
  "Ex sessionKey #i C M.
    ClientSentSessionKey(C, M, sessionKey) @ i &
    not(Ex #r. SessionKeyReveal(sessionKey) @ r)"

// Lemma to ensure the delegated credential remains secret unless explicitly revealed
lemma DelegatedCredentialSecrecy:
  "All dc #i #j S M.
      DcIssued(S, M, dc) @ i &
      K(dc) @ j
    ==> Ex #r. DcReveal(dc) @ r"

// Lemma to ensure that the middlebox correctly receives and uses the session key
lemma MiddleboxReceivesSessionKey:
  exists-trace
  "Ex sessionKey #i M.
    MiddleboxReceivedSessionKey(M, sessionKey) @ i &
    not(Ex #r. SessionKeyReveal(sessionKey) @ r)"

// Lemma to ensure that the client receives a valid confirmation from the middlebox
lemma ClientReceivesValidConfirmation:
  exists-trace
  "Ex sessionKey #i #j C M.
    ClientSentSessionKey(C, M, sessionKey) @ i &
    MiddleboxConfirmedSessionKey(M, sessionKey) @ j &
    i < j"

end

